nodes = readGraph()
simOptions = readOptions()

//initializing types
for (i = 0; i < nodes.size(); i++) do
    if (i < nodes.size() / 2) do
        nodes[i].type = 'A'
    end else do
        nodes[i].type = 'B'
    end
end

//initializing node states 
nodes.initializeStates(simOptions.initialStatesPercentages)
//initialize extended phenotypes in individuals who start the simulation in the using or using other states
nodes.initializeExtendedPhenotypes()

//main cycle
for (i = 0; i < simOptions.cycles; i++) do 
    shuffle(nodes)
    //Runs a number of death/birth cycles (4% in the article)

    for (d = 0; d < simOptions.deathsByCycle; d++) do
        neighbors = nodes[d].getNeighbors()
        chosenNeighborIndex = weightedRandomChoice(neighbors)
        //generating new individual
        newNode = new Node()
        newNode.type = nodes[chosenNeighborIndex].type 
        newNode.state = SEARCHING
        newNode.stateTimer = 30
        newNode.setExtendedPhenotype(NULL)

        //saving extended phenotype reference
        abandoned = nodes[d].getExtendedPhenotype()
        //replaces old individual 
        nodes[d] = newNode
        
        //attempt to assign an abandoned extended phenotype to a random type A neighbor in the searching state      
        try do
            searchingNeighbors = searchingStateIndividualsFrom(neighbors)
            chosen = randomlyAssignExtendedPhenotypeTo(searchingNeighbors, abandoned)            
            chosen.state = USING_OTHER
        end catch(cantAssignExtendedPhenotypeError) do
            //if no neighbors can accept a new extended phenotype, a new attempt is made with the other individuals in the searching state
            try do
                searchingNodes = searchingStateIndividualsFrom(nodes)
                chosen = randomlyAssignExtendedPhenotypeTo(searchingNodes, abandoned) 
                chosen.state = USING_OTHER
            end 
        end
    end
    
    //update state timers and identify individuals who will start to build or use their own extended phenotypes
    nodesWillBuild, nodesWillUse = updateStateTimers(nodes)
    updateStateToBuilding(nodesWillBuild)
    updateStateToUsing(nodesWillUse)
    nodesWillUse.initializeExtendedPhenotypes()
    //updates extended phenotype expiry times
    updateExtendedPhenotypeTimers(nodes)
    //individuals whose extended phenotypes expire will transition into the searching state
    nodesWillSearch = removeExpiredExtendedPhenotypes(nodes)    
    updateStateToSearching(nodesWillSearch)
end

print result(nodes)
