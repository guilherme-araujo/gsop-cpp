nodes = read(graph.txt)
simOptions = parse(args)

function getFitness(Node n) do
    ePh = n.getExtendedPhenotype()
    if ePh is not Null do
        return 1.0 + ePh.getBonus()
    end else do
        return 1.0
    end
end

//shuffle() randomly reorders the node indexes
shuffle(nodes)

//initialization
for (i = 0; i < nodes.size(); i++) do
    if (i < nodes.size()*0.5) do
        nodes[i].type = 'A'
        if(i < nodes.size()*0.5*0.5) do
            nodes[i].setExtendedPhenotype(new ExtendedPhenotype(simOptions.bonusA))
        end
    end else do
        nodes[i].type = 'B'
    end
end

//main cycle
for (i = 0; i < simOptions.cycles; i++) do 
    
    shuffle(nodes)
    for (d = 0; d < simOptions.deathsByCycle; d++) do
        neighbors = node[d].getNeighbors()
        roulette[]
        for (n in neighbors) do
            roulette.add(getFitness(n))
        end
        chosen = rand(0, max(roulette))
        chosenIndex = -1
        for (r = 0; r < roulette.size(); r++) do
            if roulette[r] > chosen do
                chosenIndex = r
            end 
        end

    end
end