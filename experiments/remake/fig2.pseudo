nodes = readGraph()
simOptions = readOptions()

//initializing types
for (i = 0; i < nodes.size(); i++) do
    if (i < nodes.size() / 2) do
        nodes[i].type = 'A'
    end else do
        nodes[i].type = 'B'
    end
end

//initializing extended phenotypes
nodes.addExtendedPhenotypes(type = 'A', 50%)
if (simOptions.isTypeBGenerator) do
    nodes.addExtendedPhenotypes(type = 'B', 50%)
end

//main cycle
for (i = 0; i < simOptions.cycles; i++) do 
    //Runs a number of death/birth events (4% in the article)
    for (d = 0; d < simOptions.deathsByCycle; d++) do
        neighbors = nodes[d].getNeighbors()
        chosenNeighborIndex = weightedRandomChoice(neighbors)
        //generating new individual
        newNode = new Node()
        newNode.type = nodes[chosenNeighborIndex].type 
        newNode.setExtendedPhenotype(NULL)
        //extended phenotype generation chance (50%)
        if (willGenerateExtendedPhenotype()) do
            if (newNode.type == A or simOptions.isTypeBGenerator) do
                //generates an extended phenotype with an expiry time of 30 cycles
                newNode.createExtendedPhenotype()
            end
        end
        //saving extended phenotype reference
        abandoned = nodes[d].extendedPhenotype()
        //replaces old individual 
        nodes[d] = newNode

        //if there is an abandoned extended phenotype, a random type A neighbor may be selected to occupy it
        try do
            typeANeighbors = typeAIndividualsFrom(neighbors)
            randomlyAssignExtendedPhenotypeTo(typeANeighbors, abandoned)            
        end catch(cantAssignExtendedPhenotypeError) do
            //if no neighbors can accept a new extended phenotype, a new attempt is made with the other individuals
            typeANodes = typeAIndividualsFrom(nodes)
            randomlyAssignExtendedPhenotypeTo(typeANodes, abandoned) 
        end
    end
    //updates extended phenotype expiry times
    updateExtendedPhenotypeTimers(nodes)
    removeExpiredExtendedPhenotypes(nodes)
end

print result(nodes)
